import math
import multiprocessing
import threading
import time
from multiprocessing.pool import ThreadPool
import vtk
from opencamlib import ocl
# import camvtk
from src import camvtk
import ngc_writer
from toolpath_examples import path_algorithm


class tool_path:
    def __init__(self, file):
        self.file = None
        self.tool_diameter = 3
        self.surface = None
        self.cutter = None

    def analyze_file(self):
        self.surface = STLSurfaceSource(self.file)

    def set_tool(self, type, *args):
        pass


# 自适应避让刀路
def adaptive_path_drop_cutter(surface, cutter, paths):
    apdc = ocl.AdaptivePathDropCutter()
    # apdc = ocl.AdaptiveWaterline()
    # apdc = ocl.PathDropCutter()
    # apdc.setZ(-1)
    apdc.setSTL(surface)
    apdc.setCutter(cutter)
    apdc.setSampling(0.04)  # 最大采样或“步进”距离
    # 防止丢失STL模型的任何细节，这个数应该与最小的三角形相似或更小
    apdc.setMinSampling(0.01)  # 最小采样或“步进”距离
    # 该算法细分了工具路径的“陡峭”部分
    # 直到我们达到这个极限。

    cl_paths = []
    n_points = 0
    # print(6666666666)
    for path in paths:
        apdc.setPath(path)
        apdc.run()
        cl_points = apdc.getCLPoints()
        n_points = n_points + len(cl_points)
        cl_paths.append(cl_points)
    # print(55555555555)
    # print(cl_paths, n_points)
    return cl_paths, n_points


# 这可以是任意三角形的源
# 只要它产生一个我们可以使用的ocl.STLSurf（）
def STLSurfaceSource(filename):
    stl = camvtk.STLSurf(filename)
    polydata = stl.src.GetOutput()
    # print(polydata)
    s = ocl.STLSurf()
    camvtk.vtkPolyData2OCLSTL(polydata, s)
    return s


# 筛选单个路径
def filter_path(path, tol):
    f = ocl.LineCLFilter()
    f.setTolerance(tol)
    for p in path:
        if p.z == 0:
            continue
        p2 = ocl.CLPoint(p.x, p.y, p.z)
        f.addCLPoint(p2)
    f.run()
    return f.getCLPoints()


# 为了减少g代码的大小，我们在这里进行过滤。（这不是严格要求的，可以省略）
# 如果有过滤器的话，我们可以在这里检测到G2/G3电弧。
# 想法:
# 如果原始工具路径中有三个点（p1,p2,p3）
# 和点p2在直线p1-p3的容差范围内
# 然后我们将路径简化为（p1,p3）
def filterCLPaths(cl_paths, tolerance=0.001):
    cl_filtered_paths = []
    t_before = time.time()
    n_filtered = 0
    for cl_path in cl_paths:
        cl_filtered = filter_path(cl_path, tolerance)
        n_filtered = n_filtered + len(cl_filtered)
        cl_filtered_paths.append(cl_filtered)
    return cl_filtered_paths, n_filtered


# 使用ngc_writer并将g代码写入标准输出或文件
def write_zig_gcode_file(filename, n_triangles, t1, n1, tol, t2, n2, toolpath):
    ngc_writer.clearance_height = 20  # 安全高度
    ngc_writer.feed_height = 3  # 进刀高度
    ngc_writer.feed = 600  # 进给速度
    ngc_writer.plunge_feed = 600  # z轴进给速度
    ngc_writer.metric = True  # 公尺/英尺 flag
    # ngc_writer.comment(" OpenCAMLib %s" % ocl.version())
    # ngc_writer.comment(" STL surface: %s" % filename)
    # ngc_writer.comment("   triangles: %d" % n_triangles)
    # ngc_writer.comment(" OpenCAMLib::AdaptivePathDropCutter run took %.2f s" % t1)
    # ngc_writer.comment(" got %d raw CL-points " % n1)
    # ngc_writer.comment(" filtering to tolerance %.4f " % (tol))
    # ngc_writer.comment(" got %d filtered CL-points. Filter done in %.3f s " % (n2, t2))
    # ngc_writer.preamble()
    first = True
    # print(toolpath)
    for path in toolpath:
        if len(path) == 0:
            continue
        try:
            if first:
                ngc_writer.pen_up()
                first_pt = path[0]
                ngc_writer.xy_rapid_to(first_pt.x, first_pt.y)
                ngc_writer.pen_down(first_pt.z)
                # first = False
            for p in path[1:]:
                ngc_writer.line_to(p.x, p.y, p.z)
        except Exception as e:
            print("write gcode", e)
    # ngc_writer.postamble()  # 结束


def gcode_file(toolpath):
    ngc_writer.clearance_height = 20  # 安全高度
    ngc_writer.feed_height = 3  # 进刀高度
    ngc_writer.feed = 600  # 进给速度
    ngc_writer.plunge_feed = 600  # z轴进给速度
    ngc_writer.metric = True  # 公尺/英尺 flag
    first = True
    for path in toolpath:
        try:
            if first:
                ngc_writer.pen_up()
                first_pt = path[0]
                ngc_writer.xy_rapid_to(first_pt[0], first_pt[1])
                ngc_writer.pen_down(first_pt[2])
                first = False
            for p in path[1:]:
                ngc_writer.line_to(p[0], p[1], p[2])
        except Exception as e:
            print("write gcode", e)


# 图像可视化
def vtk_visualize_parallel_finish_zig(stlfile, toolpaths):
    myscreen = camvtk.VTKScreen()
    stl = camvtk.STLSurf(stlfile)
    myscreen.addActor(stl)
    stl.SetSurface()
    stl.SetColor(camvtk.cyan)
    # myscreen.camera.SetPosition(15, 13, 7)
    # myscreen.camera.SetFocalPoint(5, 5, 0)

    rapid_height = 10  # 安全高度
    feed_height = 10   # 进给高度
    rapidColor = camvtk.pink
    XYrapidColor = camvtk.green
    plungeColor = camvtk.red
    feedColor = camvtk.yellow
    pos = ocl.Point(0, 0, 0)
    first = True
    for path in toolpaths:
        if len(path) == 0:
            continue
        try:
            first_pt = path[0]
            if first:  # 绿色球体表示开始位置
                myscreen.addActor(
                    camvtk.Sphere(center=(first_pt.x, first_pt.y, rapid_height), radius=1, color=camvtk.green))
                pos = ocl.Point(first_pt.x, first_pt.y,
                                first_pt.z)
                first = False
            # else:
                # 回到进给高度
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(pos.x, pos.y, feed_height), color=plungeColor))
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, rapid_height), color=rapidColor))
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, rapid_height), p2=(first_pt.x, first_pt.y, rapid_height),
                                color=XYrapidColor))
                pos = ocl.Point(first_pt.x, first_pt.y, first_pt.z)

                # 回到进给高度
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, rapid_height), p2=(pos.x, pos.y, feed_height), color=rapidColor))
                # 下降到加工高度
                myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, pos.z), color=plungeColor))

            # 开始加工
            for p in path[1:]:
                myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(p.x, p.y, p.z), color=feedColor))
                pos = ocl.Point(p.x, p.y, p.z)
        except Exception as e:
            print("vtk", e)

    # 加工完成、回到安全高度
    myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(pos.x, pos.y, feed_height), color=plungeColor))
    myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, rapid_height), color=rapidColor))
    myscreen.addActor(camvtk.Sphere(center=(pos.x, pos.y, rapid_height), radius=0.1, color=camvtk.red))

    camvtk.drawArrows(myscreen, center=(0, 0, 0))
    camvtk.drawOCLtext(myscreen)
    myscreen.render()
    myscreen.iren.Start()


def vtk_all(stlfile, toolpaths):
    myscreen = camvtk.VTKScreen()
    stl = camvtk.STLSurf(stlfile)
    myscreen.addActor(stl)
    stl.SetSurface()
    stl.SetColor(camvtk.cyan)
    # myscreen.camera.SetPosition(15, 13, 7)
    # myscreen.camera.SetFocalPoint(5, 5, 0)

    rapid_height = 10  # 安全高度
    feed_height = 10  # 进给高度
    rapidColor = camvtk.pink
    XYrapidColor = camvtk.green
    plungeColor = camvtk.red
    feedColor = camvtk.yellow
    pos = ocl.Point(0, 0, 0)
    first = True
    line_points = []
    for path in toolpaths:
        if len(path) == 0:
            continue
        try:
            first_pt = path[0]
            if first:  # 绿色球体表示开始位置
                myscreen.addActor(
                    camvtk.Sphere(center=(first_pt.x, first_pt.y, rapid_height), radius=1, color=camvtk.green))
                pos = ocl.Point(first_pt.x, first_pt.y,
                                first_pt.z)
                first = False
                # else:
                # 回到进给高度
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(pos.x, pos.y, feed_height), color=plungeColor))
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, rapid_height), color=rapidColor))
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, rapid_height), p2=(first_pt.x, first_pt.y, rapid_height),
                                color=XYrapidColor))
                pos = ocl.Point(first_pt.x, first_pt.y, first_pt.z)

                # 回到进给高度
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, rapid_height), p2=(pos.x, pos.y, feed_height), color=rapidColor))
                # 下降到加工高度
                myscreen.addActor(
                    camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, pos.z), color=plungeColor))

            # 开始加工
            for p in path[1:]:
                line_points.append(((pos.x, pos.y, pos.z), (p.x, p.y, p.z)))
                pos = ocl.Point(p.x, p.y, p.z)
        except Exception as e:
            print("vtk", e)

    line_actors = camvtk.Lines(line_points)
    myscreen.addActor(line_actors)

    # 加工完成、回到安全高度
    myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(pos.x, pos.y, feed_height), color=plungeColor))
    myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, rapid_height), color=rapidColor))
    myscreen.addActor(camvtk.Sphere(center=(pos.x, pos.y, rapid_height), radius=0.1, color=camvtk.red))

    camvtk.drawArrows(myscreen, center=(0, 0, 0))
    camvtk.drawOCLtext(myscreen)
    myscreen.render()
    myscreen.iren.Start()


def vtk_layer(stlfile, shared_list):
    myscreen = camvtk.VTKScreen()
    stl = camvtk.STLSurf(stlfile)
    myscreen.addActor(stl)
    stl.SetSurface()
    stl.SetColor(camvtk.cyan)
    rapid_height = 50  # 安全高度
    feed_height = 50  # 进给高度
    rapidColor = camvtk.pink
    XYrapidColor = camvtk.yellow
    plungeColor = camvtk.red
    feedColor = camvtk.green
    pos = ocl.Point(0, 0, 0)
    first = True
    line_points = []
    for path in shared_list:
        # try:
        first_pt = path[0]
        if first:  # 绿色球体表示开始位置
            myscreen.addActor(
                camvtk.Sphere(center=(first_pt[0], first_pt[1], rapid_height), radius=1, color=camvtk.green))
            pos = ocl.Point(first_pt[0], first_pt[1],
                            first_pt[2])
            first = False
            # else:
            # 回到进给高度
            myscreen.addActor(
                camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(pos.x, pos.y, feed_height), color=plungeColor))
            myscreen.addActor(
                camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, rapid_height), color=rapidColor))
            myscreen.addActor(
                camvtk.Line(p1=(pos.x, pos.y, rapid_height), p2=(first_pt[0], first_pt[1], rapid_height),
                            color=XYrapidColor))
            pos = ocl.Point(first_pt[0], first_pt[1], first_pt[2])

            # 回到进给高度
            myscreen.addActor(
                camvtk.Line(p1=(pos.x, pos.y, rapid_height), p2=(pos.x, pos.y, feed_height), color=rapidColor))
            # 下降到加工高度
            myscreen.addActor(
                camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, pos.z), color=plungeColor))

            # 开始加工
            for p in path[1:]:
                line_points.append(((pos.x, pos.y, pos.z), (p[0], p[1], p[2])))
                pos = ocl.Point(p[0], p[1], p[2])
        for p in path:
            line_points.append(((pos.x, pos.y, pos.z), (p[0], p[1], p[2])))
            pos = ocl.Point(p[0], p[1], p[2])
    # except Exception as e:
    #     print("vtk", e)

    line_actors = camvtk.Lines(line_points)
    myscreen.addActor(line_actors)

    # 加工完成、回到安全高度
    myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, pos.z), p2=(pos.x, pos.y, feed_height), color=plungeColor))
    myscreen.addActor(camvtk.Line(p1=(pos.x, pos.y, feed_height), p2=(pos.x, pos.y, rapid_height), color=rapidColor))
    myscreen.addActor(camvtk.Sphere(center=(pos.x, pos.y, rapid_height), radius=0.1, color=camvtk.red))

    camvtk.drawArrows(myscreen, center=(0, 0, 0))
    camvtk.drawOCLtext(myscreen)
    myscreen.render()
    myscreen.iren.Start()


def tool_threading(radius, shared_dict):
    # stlfile = "../file/coin_half.stl"
    diameter = 3
    length = 50
    simplify_file = 'simplified_model.stl'
    surface = STLSurfaceSource(simplify_file)
    cutter = ocl.CylCutter(diameter, length)          # 平底刀
    # radius = 1
    paths = path_algorithm.SpiralPath(0, 0, -3, radius, 1)  # 螺旋路径1，从内到外
    (raw_toolpath, n_raw) = adaptive_path_drop_cutter(surface, cutter, paths)
    (toolpaths, n_filtered) = filterCLPaths(raw_toolpath, tolerance=0.001)
    toolpaths_list = []
    print(radius)
    for path in toolpaths:
        if len(path) == 0:
            continue
        for first_pt in path:
            toolpaths_list.append((first_pt.x, first_pt.y, first_pt.z))
            # toolpaths_list.append({"x": first_pt.x, "y": first_pt.y, "z": first_pt.z})
    shared_dict[radius] = toolpaths_list


def tool_layer(radius, num, processes_num, shared_dict):
    # stlfile = "../file/coin_half.stl"
    diameter = 1.5
    length = 8
    simplify_file = 'simplified_model.stl'
    surface = STLSurfaceSource(simplify_file)
    # angle = math.pi / 6
    # cutter = ocl.ConeCutter(diameter, angle, length)  # 锥形刀
    cutter = ocl.CylCutter(diameter, length)          # 平底刀

    min_radius = radius * ((num - 1) / processes_num)
    max_radius = radius * (num / processes_num)
    # print("num1", ((num - 1) / processes_num))
    # print("num2", (num / processes_num))
    # print("min_radius", min_radius)
    # print("max_radius", max_radius)
    paths = path_algorithm.SpiralPathPart(0, 0, -10, min_radius, max_radius, 0.5, 1)  # 螺旋路径1，从内到外
    (raw_toolpath, n_raw) = adaptive_path_drop_cutter(surface, cutter, paths)
    (toolpaths, n_filtered) = filterCLPaths(raw_toolpath, tolerance=0.001)
    toolpaths_list = []
    # print(num)
    for path in toolpaths:
        if len(path) == 0:
            continue
        for first_pt in path:
            toolpaths_list.append((first_pt.x, first_pt.y, first_pt.z))
            # toolpaths_list.append({"x": first_pt.x, "y": first_pt.y, "z": first_pt.z})
    shared_dict[num] = toolpaths_list
    # print(shared_dict)


def simplify_stl_quadratic(input_file, output_file, target_reduction=0.5):
    # 读取 STL 文件
    reader = vtk.vtkSTLReader()
    reader.SetFileName(input_file)
    reader.Update()

    # 获取输入的 polydata
    polydata = reader.GetOutput()

    # 创建 vtkQuadricDecimation 对象来进行简化
    decimator = vtk.vtkQuadricDecimation()
    decimator.SetInputData(polydata)
    decimator.SetTargetReduction(target_reduction)  # 设置简化目标：0.5表示减少50%面数
    decimator.Update()

    # 获取简化后的 polydata
    simplified_polydata = decimator.GetOutput()

    # 使用 STL writer 将简化后的数据保存为 STL 文件
    writer = vtk.vtkSTLWriter()
    writer.SetFileName(output_file)
    writer.SetInputData(simplified_polydata)
    writer.Write()


if __name__ == "__main__":
    # stlfile = "../file/elephant.stl"
    stlfile = "../file/Throwing.stl"
    # stlfile = "../file/coin_half.stl"
    # stlfile = "../file/left_elephant2.stl"
    ymin = -75
    ymax = 75
    xmin = -50
    xmax = 50
    z_depth = -1
    Ny = 20
    layer = 5
    step_over = 1
    diameter = 3
    length = 8
    # 示例：简化 STL 文件
    simplify_file = 'simplified_model.stl'
    simplify_stl_quadratic(stlfile, simplify_file, target_reduction=0.1)
    surface = STLSurfaceSource(simplify_file)

    # cutter = ocl.BallCutter(diameter, length)             # 球刀
    cutter = ocl.CylCutter(diameter, length)         # 平底刀

    # corner_radius = 0.05
    # cutter = ocl.BullCutter(diameter, 0.2, length)        # 环形刀
    # angle = math.pi/4
    # cutter = ocl.ConeCutter(diameter, angle, length)      # 锥形刀
    # cutter = cutter.offsetCutter(0.4)

    a1 = [(-45.54948043823242, 76.53271484375), (-45.54948043823242, 76.75933074951172), (-45.54948043823242, 76.75933074951172), (-45.54948043823242, 102.84944915771484), (-45.54948043823242, 102.84944915771484), (-45.54871368408203, 102.85861206054688), (-45.54871368408203, 102.85861206054688), (-45.46043014526367, 103.91368865966797), (-45.46043014526367, 103.91368865966797), (-45.45814895629883, 103.92259979248047), (-45.45814895629883, 103.92259979248047), (-45.1955451965332, 104.94830322265625), (-45.1955451965332, 104.94830322265625), (-45.19181442260742, 104.95671081542969), (-45.19181442260742, 104.95671081542969), (-44.76240158081055, 105.9244613647461), (-44.76240158081055, 105.9244613647461), (-44.75732421875, 105.93212890625), (-44.75732421875, 105.93212890625), (-44.172908782958984, 106.81499481201172), (-44.172908782958984, 106.81499481201172), (-44.166629791259766, 106.82171630859375), (-44.166629791259766, 106.82171630859375), (-43.44353103637695, 107.5951156616211), (-43.44353103637695, 107.5951156616211), (-43.331687927246094, 107.6963119506836), (-43.331687927246094, 107.6963119506836), (-30.455495834350586, 119.3470458984375), (-30.455495834350586, 119.3470458984375), (-30.45333480834961, 119.34870147705078), (-30.45333480834961, 119.34870147705078), (-30.204620361328125, 119.53901672363281), (-30.204620361328125, 119.53901672363281), (-30.20221710205078, 119.54029083251953), (-30.20221710205078, 119.54029083251953), (-29.92561149597168, 119.687255859375), (-29.92561149597168, 119.687255859375), (-29.923032760620117, 119.68811798095703), (-29.923032760620117, 119.68811798095703), (-29.626096725463867, 119.78773498535156), (-29.626096725463867, 119.78773498535156), (-29.623411178588867, 119.78816223144531), (-29.623411178588867, 119.78816223144531), (-29.31412696838379, 119.83772277832031), (-29.31412696838379, 119.83772277832031), (-29.3114070892334, 119.83770751953125), (-29.3114070892334, 119.83770751953125), (-28.99822235107422, 119.83587646484375), (-28.99822235107422, 119.83587646484375), (-28.995540618896484, 119.83541107177734), (-28.995540618896484, 119.83541107177734), (-28.686847686767578, 119.78225708007812), (-28.686847686767578, 119.78225708007812), (-28.68427848815918, 119.78136444091797), (-28.68427848815918, 119.78136444091797), (-28.388525009155273, 119.67829895019531), (-28.388525009155273, 119.67829895019531), (-28.386137008666992, 119.67699432373047), (-28.386137008666992, 119.67699432373047), (-28.11124610900879, 119.52682495117188), (-28.11124610900879, 119.52682495117188), (-28.109106063842773, 119.525146484375), (-28.109106063842773, 119.525146484375), (-27.862634658813477, 119.33193969726562), (-27.862634658813477, 119.33193969726562), (-27.860797882080078, 119.3299331665039), (-27.860797882080078, 119.3299331665039), (-27.649250030517578, 119.09890747070312), (-27.649250030517578, 119.09890747070312), (-27.647768020629883, 119.09662628173828), (-27.647768020629883, 119.09662628173828), (-27.477052688598633, 118.83406066894531), (-27.477052688598633, 118.83406066894531), (-27.475963592529297, 118.8315658569336), (-27.475963592529297, 118.8315658569336), (-27.350570678710938, 118.54454040527344), (-27.350570678710938, 118.54454040527344), (-27.349905014038086, 118.54190063476562), (-27.349905014038086, 118.54190063476562), (-27.27332305908203, 118.23820495605469), (-27.27332305908203, 118.23820495605469), (-27.273099899291992, 118.2354965209961), (-27.273099899291992, 118.2354965209961), (-27.24733543395996, 117.92333984375), (-27.24733543395996, 117.4372787475586), (-27.24733543395996, 117.92333984375), (-27.24733543395996, 61.47749328613281), (-27.24733543395996, 117.4372787475586), (-27.24755859375, 61.47478485107422), (-27.24733543395996, 61.47749328613281), (-27.273263931274414, 61.162750244140625), (-27.24755859375, 61.47478485107422), (-27.273929595947266, 61.16011428833008), (-27.273263931274414, 61.162750244140625), (-27.35051155090332, 60.85650634765625), (-27.273929595947266, 61.16011428833008), (-27.351598739624023, 60.8540153503418), (-27.35051155090332, 60.85650634765625), (-27.47687339782715, 60.56707763671875), (-27.351598739624023, 60.8540153503418), (-27.478355407714844, 60.564796447753906), (-27.47687339782715, 60.56707763671875), (-27.649011611938477, 60.302268981933594), (-27.478355407714844, 60.564796447753906), (-27.650848388671875, 60.300262451171875), (-27.649011611938477, 60.302268981933594), (-27.86221694946289, 60.06927490234375), (-27.650848388671875, 60.300262451171875), (-27.864356994628906, 60.067596435546875), (-27.86221694946289, 60.06927490234375), (-28.110708236694336, 59.874366760253906), (-27.864356994628906, 60.067596435546875), (-28.113094329833984, 59.87306213378906), (-28.110708236694336, 59.874366760253906), (-28.3878116607666, 59.72285461425781), (-28.113094329833984, 59.87306213378906), (-28.390378952026367, 59.72195816040039), (-28.3878116607666, 59.72285461425781), (-28.686012268066406, 59.618797302246094), (-28.390378952026367, 59.72195816040039), (-28.688692092895508, 59.61833572387695), (-28.686012268066406, 59.618797302246094), (-28.997209548950195, 59.56504821777344), (-28.688692092895508, 59.61833572387695), (-28.999929428100586, 59.56502914428711), (-28.997209548950195, 59.56504821777344), (-29.313053131103516, 59.56304168701172), (-28.999929428100586, 59.56502914428711), (-29.315738677978516, 59.56346893310547), (-29.313053131103516, 59.56304168701172), (-29.62490463256836, 59.612823486328125), (-29.315738677978516, 59.56346893310547), (-29.627483367919922, 59.613685607910156), (-29.62490463256836, 59.612823486328125), (-29.92441749572754, 59.71308135986328), (-29.627483367919922, 59.613685607910156), (-29.926820755004883, 59.71435546875), (-29.92441749572754, 59.71308135986328), (-30.203428268432617, 59.861061096191406), (-29.926820755004883, 59.71435546875), (-30.205589294433594, 59.86271286010742), (-30.203428268432617, 59.861061096191406), (-30.454423904418945, 60.05278015136719), (-30.205589294433594, 59.86271286010742), (-30.566242218017578, 60.1537971496582), (-30.454423904418945, 60.05278015136719), (-43.43977355957031, 71.78366088867188), (-30.566242218017578, 60.1537971496582), (-43.44606399536133, 71.7903823852539), (-43.43977355957031, 71.78366088867188), (-44.170406341552734, 72.5639877319336), (-43.44606399536133, 71.7903823852539), (-44.17549133300781, 72.57166290283203), (-44.170406341552734, 72.5639877319336), (-44.76091003417969, 73.45503234863281), (-44.17549133300781, 72.57166290283203), (-44.7646484375, 73.46344757080078), (-44.76091003417969, 73.45503234863281), (-45.19489288330078, 74.43195343017578), (-44.7646484375, 73.46344757080078), (-45.19717788696289, 74.44087219238281), (-45.19489288330078, 74.43195343017578), (-45.46025085449219, 75.46747589111328), (-45.19717788696289, 74.44087219238281), (-45.46101760864258, 75.47664642333984), (-45.46025085449219, 75.46747589111328), (-45.54948043823242, 76.53271484375), (-45.46101760864258, 75.47664642333984)]
    ef = [(34.799072265625, 31.02429962158203), (34.42256164550781, 31.02429962158203), (34.42256164550781, 31.02429962158203), (16.272090911865234, 31.02429962158203), (16.272090911865234, 31.02429962158203), (16.256864547729492, 31.02557373046875), (16.256864547729492, 31.02557373046875), (15.522867202758789, 31.086990356445312), (15.522867202758789, 31.086990356445312), (15.508065223693848, 31.09078025817871), (15.508065223693848, 31.09078025817871), (14.794498443603516, 31.273469924926758), (14.794498443603516, 31.273469924926758), (14.780532836914062, 31.279666900634766), (14.780532836914062, 31.279666900634766), (14.107282638549805, 31.57840347290039), (14.107282638549805, 31.57840347290039), (14.094541549682617, 31.586837768554688), (14.094541549682617, 31.586837768554688), (13.480347633361816, 31.993406295776367), (13.480347633361816, 31.993406295776367), (13.469186782836914, 32.003841400146484), (13.469186782836914, 32.003841400146484), (12.93114185333252, 32.50688934326172), (12.93114185333252, 32.50688934326172), (12.763008117675781, 32.69270706176758), (12.763008117675781, 32.69270706176758), (4.657783508300781, 41.65046691894531), (4.657783508300781, 41.65046691894531), (4.655036926269531, 41.654056549072266), (4.655036926269531, 41.654056549072266), (4.5226359367370605, 41.82707977294922), (4.5226359367370605, 41.82707977294922), (4.520514965057373, 41.83106994628906), (4.520514965057373, 41.83106994628906), (4.418275356292725, 42.023502349853516), (4.418275356292725, 42.023502349853516), (4.416837692260742, 42.02778625488281), (4.416837692260742, 42.02778625488281), (4.347537994384766, 42.2343635559082), (4.347537994384766, 42.2343635559082), (4.346822738647461, 42.238826751708984), (4.346822738647461, 42.238826751708984), (4.312346935272217, 42.45398712158203), (4.312346935272217, 42.45398712158203), (4.312373161315918, 42.4585075378418), (4.312373161315918, 42.4585075378418), (4.3136467933654785, 42.67638397216797), (4.3136467933654785, 42.67638397216797), (4.314414024353027, 42.68083953857422), (4.314414024353027, 42.68083953857422), (4.3513946533203125, 42.895591735839844), (4.3513946533203125, 42.895591735839844), (4.352881908416748, 42.89986038208008), (4.352881908416748, 42.89986038208008), (4.424581050872803, 43.105613708496094), (4.424581050872803, 43.105613708496094), (4.426748275756836, 43.109580993652344), (4.426748275756836, 43.109580993652344), (4.531219005584717, 43.30081558227539), (4.531219005584717, 43.30081558227539), (4.5340070724487305, 43.30437088012695), (4.5340070724487305, 43.30437088012695), (4.668417930603027, 43.47583770751953), (4.668417930603027, 43.47583770751953), (4.671751976013184, 43.47888946533203), (4.671751976013184, 43.47888946533203), (4.832472801208496, 43.626060485839844), (4.832472801208496, 43.626060485839844), (4.836261749267578, 43.62852478027344), (4.836261749267578, 43.62852478027344), (5.018924713134766, 43.74728775024414), (5.018924713134766, 43.74728775024414), (5.023066997528076, 43.74909591674805), (5.023066997528076, 43.74909591674805), (5.222747325897217, 43.836334228515625), (5.222747325897217, 43.836334228515625), (5.227129936218262, 43.837440490722656), (5.227129936218262, 43.837440490722656), (5.4384074211120605, 43.890716552734375), (5.4384074211120605, 43.890716552734375), (5.4429121017456055, 43.89108657836914), (5.4429121017456055, 43.89108657836914), (5.660072326660156, 43.90901184082031), (6.46763801574707, 43.90901184082031), (5.660072326660156, 43.90901184082031), (45.39794921875, 43.90901184082031), (6.46763801574707, 43.90901184082031), (45.40245056152344, 43.90864181518555), (45.39794921875, 43.90901184082031), (45.61952590942383, 43.89075469970703), (45.40245056152344, 43.90864181518555), (45.62390899658203, 43.8896484375), (45.61952590942383, 43.89075469970703), (45.83512496948242, 43.83637237548828), (45.62390899658203, 43.8896484375), (45.839263916015625, 43.834564208984375), (45.83512496948242, 43.83637237548828), (46.03887939453125, 43.747413635253906), (45.839263916015625, 43.834564208984375), (46.042667388916016, 43.74494934082031), (46.03887939453125, 43.747413635253906), (46.22530746459961, 43.62622833251953), (46.042667388916016, 43.74494934082031), (46.228641510009766, 43.62317657470703), (46.22530746459961, 43.62622833251953), (46.38933563232422, 43.47613525390625), (46.228641510009766, 43.62317657470703), (46.39212417602539, 43.47257995605469), (46.38933563232422, 43.47613525390625), (46.52655029296875, 43.30119705200195), (46.39212417602539, 43.47257995605469), (46.528717041015625, 43.29723358154297), (46.52655029296875, 43.30119705200195), (46.63321304321289, 43.10611343383789), (46.528717041015625, 43.29723358154297), (46.634700775146484, 43.10184860229492), (46.63321304321289, 43.10611343383789), (46.70647048950195, 42.896183013916016), (46.634700775146484, 43.10184860229492), (46.70724105834961, 42.89173126220703), (46.70647048950195, 42.896183013916016), (46.74430847167969, 42.67709732055664), (46.70724105834961, 42.89173126220703), (46.74433898925781, 42.672576904296875), (46.74430847167969, 42.67709732055664), (46.745723724365234, 42.45474624633789), (46.74433898925781, 42.672576904296875), (46.74501037597656, 42.45028305053711), (46.745723724365234, 42.45474624633789), (46.71067428588867, 42.23520278930664), (46.74501037597656, 42.45028305053711), (46.7092399597168, 42.230918884277344), (46.71067428588867, 42.23520278930664), (46.64009475708008, 42.02434539794922), (46.7092399597168, 42.230918884277344), (46.637977600097656, 42.020355224609375), (46.64009475708008, 42.02434539794922), (46.53591537475586, 41.827919006347656), (46.637977600097656, 42.020355224609375), (46.533172607421875, 41.8243293762207), (46.53591537475586, 41.827919006347656), (46.40094757080078, 41.65121841430664), (46.533172607421875, 41.8243293762207), (46.233116149902344, 41.46543884277344), (46.40094757080078, 41.65121841430664), (38.14240646362305, 32.5095329284668), (46.233116149902344, 41.46543884277344), (38.13124084472656, 32.499080657958984), (38.14240646362305, 32.5095329284668), (37.593055725097656, 31.995168685913086), (38.13124084472656, 32.499080657958984), (37.58030700683594, 31.98672103881836), (37.593055725097656, 31.995168685913086), (36.96575927734375, 31.579452514648438), (37.58030700683594, 31.98672103881836), (36.9517822265625, 31.573244094848633), (36.96575927734375, 31.579452514648438), (36.27800750732422, 31.273929595947266), (36.9517822265625, 31.573244094848633), (36.26319122314453, 31.27013397216797), (36.27800750732422, 31.273929595947266), (35.54899978637695, 31.08711814880371), (36.26319122314453, 31.27013397216797), (35.53376007080078, 31.08584213256836), (35.54899978637695, 31.08711814880371), (34.799072265625, 31.02429962158203), (35.53376007080078, 31.08584213256836)]
    le = [(4.312347412109375, 25.45398712158203), (4.347537994384766, 25.234363555908203), (4.312347412109375, 25.45398712158203), (4.347537994384766, 25.234363555908203), (4.347537994384766, 25.234363555908203), (4.347537994384766, 25.234363555908203), (4.347537994384766, 25.234363555908203), (4.347537994384766, 25.234363555908203), (4.41827392578125, 25.023502349853516), (4.41827392578125, 25.023502349853516), (4.41827392578125, 25.023502349853516), (4.41827392578125, 25.023502349853516), (4.41827392578125, 25.023502349853516), (4.41827392578125, 25.023502349853516), (4.522636413574219, 24.82707977294922), (4.522636413574219, 24.82707977294922), (4.522636413574219, 24.82707977294922), (4.522636413574219, 24.82707977294922), (4.522636413574219, 24.82707977294922), (4.522636413574219, 24.82707977294922), (4.657783508300781, 24.650466918945312), (4.657783508300781, 24.650466918945312), (4.657783508300781, 24.650466918945312), (4.657783508300781, 24.650466918945312), (4.657783508300781, 24.650466918945312), (4.657783508300781, 24.650466918945312), (12.931140899658203, 15.506889343261719), (12.931140899658203, 15.506889343261719), (12.931140899658203, 15.506889343261719), (12.931140899658203, 15.506889343261719), (12.931140899658203, 15.506889343261719), (12.931140899658203, 15.506889343261719), (13.4803466796875, 14.993406295776367), (13.4803466796875, 14.993406295776367), (13.4803466796875, 14.993406295776367), (13.4803466796875, 14.993406295776367), (13.4803466796875, 14.993406295776367), (13.4803466796875, 14.993406295776367), (14.107284545898438, 14.57840347290039), (14.107284545898438, 14.57840347290039), (14.107284545898438, 14.57840347290039), (14.107284545898438, 14.57840347290039), (14.107284545898438, 14.57840347290039), (14.107284545898438, 14.57840347290039), (14.794498443603516, 14.273469924926758), (14.794498443603516, 14.273469924926758), (14.794498443603516, 14.273469924926758), (14.794498443603516, 14.273469924926758), (14.794498443603516, 14.273469924926758), (14.794498443603516, 14.273469924926758), (15.522865295410156, 14.086990356445312), (15.522865295410156, 14.086990356445312), (15.522865295410156, 14.086990356445312), (15.522865295410156, 14.086990356445312), (15.522865295410156, 14.086990356445312), (15.522865295410156, 14.086990356445312), (16.272090911865234, 14.024299621582031), (16.272090911865234, 14.024299621582031), (16.272090911865234, 14.024299621582031), (16.272090911865234, 14.024299621582031), (16.272090911865234, 14.024299621582031), (16.272090911865234, 14.024299621582031), (34.799072265625, 14.024299621582031), (34.799072265625, 14.024299621582031), (34.799072265625, 14.024299621582031), (34.799072265625, 14.024299621582031), (34.799072265625, 14.024299621582031), (34.799072265625, 14.024299621582031), (35.54899978637695, 14.087118148803711), (35.54899978637695, 14.087118148803711), (35.54899978637695, 14.087118148803711), (35.54899978637695, 14.087118148803711), (35.54899978637695, 14.087118148803711), (35.54899978637695, 14.087118148803711), (36.27800750732422, 14.273929595947266), (36.27800750732422, 14.273929595947266), (36.27800750732422, 14.273929595947266), (36.27800750732422, 14.273929595947266), (36.27800750732422, 14.273929595947266), (36.27800750732422, 14.273929595947266), (36.96575927734375, 14.579452514648438), (36.96575927734375, 14.579452514648438), (36.96575927734375, 14.579452514648438), (36.96575927734375, 14.579452514648438), (36.96575927734375, 14.579452514648438), (36.96575927734375, 14.579452514648438), (37.593055725097656, 14.995168685913086), (37.593055725097656, 14.995168685913086), (37.593055725097656, 14.995168685913086), (37.593055725097656, 14.995168685913086), (37.593055725097656, 14.995168685913086), (37.593055725097656, 14.995168685913086), (38.14240646362305, 15.509532928466797), (38.14240646362305, 15.509532928466797), (38.14240646362305, 15.509532928466797), (38.14240646362305, 15.509532928466797), (38.14240646362305, 15.509532928466797), (38.14240646362305, 15.509532928466797), (46.40094757080078, 24.65121841430664), (46.40094757080078, 24.65121841430664), (46.40094757080078, 24.65121841430664), (46.40094757080078, 24.65121841430664), (46.40094757080078, 24.65121841430664), (46.40094757080078, 24.65121841430664), (46.53591537475586, 24.827919006347656), (46.53591537475586, 24.827919006347656), (46.53591537475586, 24.827919006347656), (46.53591537475586, 24.827919006347656), (46.53591537475586, 24.827919006347656), (46.53591537475586, 24.827919006347656), (46.64009475708008, 25.02434539794922), (46.64009475708008, 25.02434539794922), (46.64009475708008, 25.02434539794922), (46.64009475708008, 25.02434539794922), (46.64009475708008, 25.02434539794922), (46.64009475708008, 25.02434539794922), (46.71067428588867, 25.23520278930664), (46.71067428588867, 25.23520278930664), (46.71067428588867, 25.23520278930664), (46.71067428588867, 25.23520278930664), (46.71067428588867, 25.23520278930664), (46.71067428588867, 25.23520278930664), (46.745723724365234, 25.45474624633789), (46.745723724365234, 25.45474624633789), (46.745723724365234, 25.45474624633789), (46.745723724365234, 25.45474624633789), (46.74430847167969, 25.67709732055664), (46.745723724365234, 25.45474624633789), (46.74430847167969, 25.67709732055664), (46.745723724365234, 25.45474624633789), (46.74430847167969, 25.67709732055664), (46.74430847167969, 25.67709732055664), (46.70647048950195, 25.896183013916016), (46.70647048950195, 25.896183013916016), (46.74430847167969, 25.67709732055664), (46.74430847167969, 25.67709732055664), (46.70647048950195, 25.896183013916016), (46.70647048950195, 25.896183013916016), (46.63321304321289, 26.10611343383789), (46.63321304321289, 26.10611343383789), (46.70647048950195, 25.896183013916016), (46.70647048950195, 25.896183013916016), (46.63321304321289, 26.10611343383789), (46.63321304321289, 26.10611343383789), (46.52655029296875, 26.301197052001953), (46.52655029296875, 26.301197052001953), (46.63321304321289, 26.10611343383789), (46.63321304321289, 26.10611343383789), (46.52655029296875, 26.301197052001953), (46.52655029296875, 26.301197052001953), (46.38933563232422, 26.47613525390625), (46.38933563232422, 26.47613525390625), (46.52655029296875, 26.301197052001953), (46.52655029296875, 26.301197052001953), (46.38933563232422, 26.47613525390625), (46.38933563232422, 26.47613525390625), (46.22530746459961, 26.62622833251953), (46.22530746459961, 26.62622833251953), (46.38933563232422, 26.47613525390625), (46.38933563232422, 26.47613525390625), (46.22530746459961, 26.62622833251953), (46.22530746459961, 26.62622833251953), (46.03887939453125, 26.747413635253906), (46.03887939453125, 26.747413635253906), (46.22530746459961, 26.62622833251953), (46.22530746459961, 26.62622833251953), (46.03887939453125, 26.747413635253906), (46.03887939453125, 26.747413635253906), (45.835121154785156, 26.83637237548828), (45.835121154785156, 26.83637237548828), (46.03887939453125, 26.747413635253906), (46.03887939453125, 26.747413635253906), (45.835121154785156, 26.83637237548828), (45.835121154785156, 26.83637237548828), (45.61952590942383, 26.89075469970703), (45.61952590942383, 26.89075469970703), (45.835121154785156, 26.83637237548828), (45.835121154785156, 26.83637237548828), (45.61952590942383, 26.89075469970703), (45.61952590942383, 26.89075469970703), (45.39794921875, 26.909011840820312), (45.39794921875, 26.909011840820312), (45.61952590942383, 26.89075469970703), (45.61952590942383, 26.89075469970703), (45.39794921875, 26.909011840820312), (45.39794921875, 26.909011840820312), (5.660072326660156, 26.909011840820312), (5.660072326660156, 26.909011840820312), (45.39794921875, 26.909011840820312), (45.39794921875, 26.909011840820312), (5.660072326660156, 26.909011840820312), (5.660072326660156, 26.909011840820312), (5.438407897949219, 26.890716552734375), (5.438407897949219, 26.890716552734375), (5.660072326660156, 26.909011840820312), (5.660072326660156, 26.909011840820312), (5.438407897949219, 26.890716552734375), (5.438407897949219, 26.890716552734375), (5.222747802734375, 26.836334228515625), (5.222747802734375, 26.836334228515625), (5.438407897949219, 26.890716552734375), (5.438407897949219, 26.890716552734375), (5.222747802734375, 26.836334228515625), (5.222747802734375, 26.836334228515625), (5.018924713134766, 26.74728775024414), (5.018924713134766, 26.74728775024414), (5.222747802734375, 26.836334228515625), (5.222747802734375, 26.836334228515625), (5.018924713134766, 26.74728775024414), (5.018924713134766, 26.74728775024414), (4.8324737548828125, 26.626060485839844), (4.8324737548828125, 26.626060485839844), (5.018924713134766, 26.74728775024414), (5.018924713134766, 26.74728775024414), (4.8324737548828125, 26.626060485839844), (4.8324737548828125, 26.626060485839844), (4.668418884277344, 26.47583770751953), (4.668418884277344, 26.47583770751953), (4.8324737548828125, 26.626060485839844), (4.8324737548828125, 26.626060485839844), (4.668418884277344, 26.47583770751953), (4.668418884277344, 26.47583770751953), (4.531219482421875, 26.30081558227539), (4.531219482421875, 26.30081558227539), (4.668418884277344, 26.47583770751953), (4.668418884277344, 26.47583770751953), (4.531219482421875, 26.30081558227539), (4.531219482421875, 26.30081558227539), (4.424579620361328, 26.105613708496094), (4.424579620361328, 26.105613708496094), (4.531219482421875, 26.30081558227539), (4.531219482421875, 26.30081558227539), (4.424579620361328, 26.105613708496094), (4.424579620361328, 26.105613708496094), (4.3513946533203125, 25.895591735839844), (4.3513946533203125, 25.895591735839844), (4.424579620361328, 26.105613708496094), (4.424579620361328, 26.105613708496094), (4.3513946533203125, 25.895591735839844), (4.3513946533203125, 25.895591735839844), (4.313648223876953, 25.67638397216797), (4.313648223876953, 25.67638397216797), (4.3513946533203125, 25.895591735839844), (4.3513946533203125, 25.895591735839844), (4.313648223876953, 25.67638397216797), (4.313648223876953, 25.67638397216797), (4.312347412109375, 25.45398712158203), (4.312347412109375, 25.45398712158203), (4.313648223876953, 25.67638397216797), (4.313648223876953, 25.67638397216797), (4.312347412109375, 25.45398712158203), (4.312347412109375, 25.45398712158203)]

    # paths = path_algorithm.YdirectionZigPath(xmin, xmax, ymin, ymax, -2, Ny, 4)  # 单向锯齿
    # paths = path_algorithm.YdirectionAlternatingZigPath(xmin, xmax, ymin, ymax, -2, Ny, 4)  # 双向锯齿
    paths = path_algorithm.SpiralPathOut(0, 0, -10, 75, 5, 1)  # 螺旋路径1，从内到外
    # # paths = path_algorithm.SpiralPathIn(-106, 93, -2, 10, 1, 2)  # 螺旋路径2，从外向内, 不连续圆
    # paths = path_algorithm.OffsetPath(f, diameter, -3, layer, step_over)  # 平行偏移路径
    # # paths = path_algorithm.ContourPath(ef, diameter, z_depth, layer)  # 曲线跟随
    # # paths = path_algorithm.SpiralPath(0, 0, -3, 10, 1)  # 画圆
    s = time.time()
    print(s)
    (raw_toolpath, n_raw) = adaptive_path_drop_cutter(surface, cutter, paths)
    s1 = time.time()
    print(s1 - s)
    (toolpaths, n_filtered) = filterCLPaths(raw_toolpath, tolerance=0.001)
    write_zig_gcode_file(stlfile, surface.size(), 0, n_raw, 0.001, 0, 0, toolpaths)
    vtk_all(simplify_file, toolpaths)

    # pool = ThreadPool(20)  # 使用线程池
    # tasks = [i for i in range(1, 76)]
    # results = pool.map(tool_threading, tasks)
    # pool.close()
    # pool.join()

    # for i in range(1, 76):
    #     # threading.Thread(target=tool_threading, args=(i, surface, cutter,)).start()
    #     Process(target=tool_threading, args=(i, )).start()
    #     if i % 2 == 0:
    #         time.sleep(3)

    # s = time.time()
    # print(s)

    # shared_list = []
    # processes_num = 4
    # radius = 75
    # with multiprocessing.Pool(processes=processes_num) as pool:
    #     with multiprocessing.Manager() as manager:
    #         shared_dict = manager.dict()
    #         results = pool.starmap(tool_threading, [[i, shared_dict] for i in range(1, 76)])
    #         for i in range(1, 76):
    #             shared_list.append(shared_dict[i])

    # processes_num = 8
    # radius = 75
    # shared_list = []
    # with multiprocessing.Pool(processes=processes_num) as pool:
    #     with multiprocessing.Manager() as manager:
    #         shared_dict = manager.dict()
    #         results = pool.starmap(tool_layer, [[radius, num, processes_num, shared_dict] for num in range(1, processes_num + 1)])
    #         for i in range(1, processes_num + 1):
    #             shared_list.append(shared_dict[i])
    # s1 = time.time()
    # print(s1 - s)
    # gcode_file(shared_list)
    # vtk_layer(simplify_file, shared_list)
